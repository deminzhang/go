// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: user.proto

package user

import (
	base "common/proto/base"
	comm "common/proto/comm"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Ping(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*base.Empty, error)
	// 提前校验字段  POST /user/user-check
	UserCheck(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*base.Empty, error)
	// 发送验证码 POST /user/otp
	SendOtp(ctx context.Context, in *OtpReq, opts ...grpc.CallOption) (*base.Empty, error)
	// 注册 POST /user/register
	Register(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error)
	// 登录 POST /user/login
	Login(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error)
	// 设置用户名称 POST /user/modify
	Modify(ctx context.Context, in *ModifyReq, opts ...grpc.CallOption) (*UserInfo, error)
	// 登出 需要登陆 GET /user/logout
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*base.Empty, error)
	// 获取用户信息 需要登陆 GET /user/info
	GetUser(ctx context.Context, in *base.ClientInfo, opts ...grpc.CallOption) (*UserInfo, error)
	// 找回密码 POST /user/reset-password
	ResetPassword(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*base.Empty, error)
	// 修改密码 需要登陆信息 POST /user/change-password
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*base.Empty, error)
	// 获取hostid
	HostGetId(ctx context.Context, in *comm.UserLoginReq, opts ...grpc.CallOption) (*HostResp, error)
	// 获取其他用户信息 POST /user/other-info
	GetOtherUser(ctx context.Context, in *GetOtherUserReq, opts ...grpc.CallOption) (*UserInfo, error)
	// player 登陆
	PlayerLogin(ctx context.Context, in *comm.UserLoginReq, opts ...grpc.CallOption) (*comm.UserLoginResp, error)
	GetPlayerIdByUserId(ctx context.Context, in *PlayerIdReq, opts ...grpc.CallOption) (*comm.UserLoginResp, error)
	GetPlayerFromDB(ctx context.Context, in *PlayerIdReq, opts ...grpc.CallOption) (*comm.Player, error)
	// 捏脸 POST /api/player/character-creator
	SetCharacterCreator(ctx context.Context, in *comm.SetCharacterCreatorReq, opts ...grpc.CallOption) (*base.Empty, error)
	// 创建角色 POST /api/player/create
	PlayerCreate(ctx context.Context, in *comm.PlayerCreateReq, opts ...grpc.CallOption) (*comm.PlayerCreateResp, error)
	GetPlayersInfo(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*comm.PlayerCacheMap, error)
	ClearPlayerCache(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*base.Empty, error)
	SetPlayerCache(ctx context.Context, in *comm.PlayerCacheMap, opts ...grpc.CallOption) (*base.Empty, error)
	GetPlayerByName(ctx context.Context, in *comm.PlayerSearchReq, opts ...grpc.CallOption) (*comm.PlayerCache, error)
	GetPlayerByDisplayName(ctx context.Context, in *comm.PlayerSearchReq, opts ...grpc.CallOption) (*comm.Players, error)
	PlayerMapCacheSet(ctx context.Context, in *comm.PlayerMapInfoCacheMap, opts ...grpc.CallOption) (*base.Empty, error)
	PlayerMapCacheClear(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*base.Empty, error)
	PlayerMapCacheGet(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*comm.PlayerMapInfoCacheMap, error)
	// *
	// 校验otp POST /user/check-otp
	CheckOtp(ctx context.Context, in *CheckOtpReq, opts ...grpc.CallOption) (*CheckOtpRes, error)
	// *
	// 忘记密码设置密码 POST /user/set-password
	SetPassword(ctx context.Context, in *SetPasswordReq, opts ...grpc.CallOption) (*base.Empty, error)
	// *
	// 快速注册 无邮箱校验 POST /user/quick-register
	QuickRegister(ctx context.Context, in *QuickRegisterReq, opts ...grpc.CallOption) (*UserResp, error)
	// *
	// 密码验证 POST /user/check-password
	CheckPassword(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*CheckPasswordRes, error)
	// *
	// 生成第三方token 登录轮询使用 POST /user/generate-external-token
	GenerateExternalToken(ctx context.Context, in *GenerateExternalTokenReq, opts ...grpc.CallOption) (*GenerateExternalTokenRes, error)
	// *
	// 游戏客户端跳转web用户中心 POST /user/center
	PlayerCenter(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error)
	GMTModifyEmail(ctx context.Context, in *GMTModifyEmailReq, opts ...grpc.CallOption) (*base.Empty, error)
	GMTUnbindExternalId(ctx context.Context, in *GMTUnbindExternalReq, opts ...grpc.CallOption) (*base.Empty, error)
	// *
	// 绑定第三方 POST /user/bind-external
	BindExternal(ctx context.Context, in *BindExternalReq, opts ...grpc.CallOption) (*UserResp, error)
	// *
	// 绑定第三方 POST /user/unbind-external
	UnBindExternal(ctx context.Context, in *base.ClientInfo, opts ...grpc.CallOption) (*base.Empty, error)
	// *
	// 绑定游戏 POST /user/bind-email
	BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*base.Empty, error)
	// *
	// 官网预约 POST /user/pre-register
	PreRegister(ctx context.Context, in *PreRegisterReq, opts ...grpc.CallOption) (*base.Empty, error)
	// *
	// 官网预约开服发送 POST /user/pre-register
	PreRegisterRewardSend(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*base.Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Ping(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCheck(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/UserCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SendOtp(ctx context.Context, in *OtpReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/SendOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/user.User/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/user.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Modify(ctx context.Context, in *ModifyReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/user.User/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUser(ctx context.Context, in *base.ClientInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/user.User/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ResetPassword(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) HostGetId(ctx context.Context, in *comm.UserLoginReq, opts ...grpc.CallOption) (*HostResp, error) {
	out := new(HostResp)
	err := c.cc.Invoke(ctx, "/user.User/HostGetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetOtherUser(ctx context.Context, in *GetOtherUserReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/user.User/GetOtherUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PlayerLogin(ctx context.Context, in *comm.UserLoginReq, opts ...grpc.CallOption) (*comm.UserLoginResp, error) {
	out := new(comm.UserLoginResp)
	err := c.cc.Invoke(ctx, "/user.User/PlayerLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPlayerIdByUserId(ctx context.Context, in *PlayerIdReq, opts ...grpc.CallOption) (*comm.UserLoginResp, error) {
	out := new(comm.UserLoginResp)
	err := c.cc.Invoke(ctx, "/user.User/GetPlayerIdByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPlayerFromDB(ctx context.Context, in *PlayerIdReq, opts ...grpc.CallOption) (*comm.Player, error) {
	out := new(comm.Player)
	err := c.cc.Invoke(ctx, "/user.User/GetPlayerFromDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetCharacterCreator(ctx context.Context, in *comm.SetCharacterCreatorReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/SetCharacterCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PlayerCreate(ctx context.Context, in *comm.PlayerCreateReq, opts ...grpc.CallOption) (*comm.PlayerCreateResp, error) {
	out := new(comm.PlayerCreateResp)
	err := c.cc.Invoke(ctx, "/user.User/PlayerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPlayersInfo(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*comm.PlayerCacheMap, error) {
	out := new(comm.PlayerCacheMap)
	err := c.cc.Invoke(ctx, "/user.User/GetPlayersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ClearPlayerCache(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/ClearPlayerCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetPlayerCache(ctx context.Context, in *comm.PlayerCacheMap, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/SetPlayerCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPlayerByName(ctx context.Context, in *comm.PlayerSearchReq, opts ...grpc.CallOption) (*comm.PlayerCache, error) {
	out := new(comm.PlayerCache)
	err := c.cc.Invoke(ctx, "/user.User/GetPlayerByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPlayerByDisplayName(ctx context.Context, in *comm.PlayerSearchReq, opts ...grpc.CallOption) (*comm.Players, error) {
	out := new(comm.Players)
	err := c.cc.Invoke(ctx, "/user.User/GetPlayerByDisplayName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PlayerMapCacheSet(ctx context.Context, in *comm.PlayerMapInfoCacheMap, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/PlayerMapCacheSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PlayerMapCacheClear(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/PlayerMapCacheClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PlayerMapCacheGet(ctx context.Context, in *base.PlayerIds, opts ...grpc.CallOption) (*comm.PlayerMapInfoCacheMap, error) {
	out := new(comm.PlayerMapInfoCacheMap)
	err := c.cc.Invoke(ctx, "/user.User/PlayerMapCacheGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckOtp(ctx context.Context, in *CheckOtpReq, opts ...grpc.CallOption) (*CheckOtpRes, error) {
	out := new(CheckOtpRes)
	err := c.cc.Invoke(ctx, "/user.User/CheckOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetPassword(ctx context.Context, in *SetPasswordReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/SetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) QuickRegister(ctx context.Context, in *QuickRegisterReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/user.User/QuickRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckPassword(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*CheckPasswordRes, error) {
	out := new(CheckPasswordRes)
	err := c.cc.Invoke(ctx, "/user.User/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GenerateExternalToken(ctx context.Context, in *GenerateExternalTokenReq, opts ...grpc.CallOption) (*GenerateExternalTokenRes, error) {
	out := new(GenerateExternalTokenRes)
	err := c.cc.Invoke(ctx, "/user.User/GenerateExternalToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PlayerCenter(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/user.User/PlayerCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GMTModifyEmail(ctx context.Context, in *GMTModifyEmailReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/GMTModifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GMTUnbindExternalId(ctx context.Context, in *GMTUnbindExternalReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/GMTUnbindExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindExternal(ctx context.Context, in *BindExternalReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/user.User/BindExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UnBindExternal(ctx context.Context, in *base.ClientInfo, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/UnBindExternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/BindEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PreRegister(ctx context.Context, in *PreRegisterReq, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/PreRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PreRegisterRewardSend(ctx context.Context, in *base.Empty, opts ...grpc.CallOption) (*base.Empty, error) {
	out := new(base.Empty)
	err := c.cc.Invoke(ctx, "/user.User/PreRegisterRewardSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations should embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Ping(context.Context, *base.Empty) (*base.Empty, error)
	// 提前校验字段  POST /user/user-check
	UserCheck(context.Context, *UserReq) (*base.Empty, error)
	// 发送验证码 POST /user/otp
	SendOtp(context.Context, *OtpReq) (*base.Empty, error)
	// 注册 POST /user/register
	Register(context.Context, *UserReq) (*UserResp, error)
	// 登录 POST /user/login
	Login(context.Context, *UserReq) (*UserResp, error)
	// 设置用户名称 POST /user/modify
	Modify(context.Context, *ModifyReq) (*UserInfo, error)
	// 登出 需要登陆 GET /user/logout
	Logout(context.Context, *LogoutReq) (*base.Empty, error)
	// 获取用户信息 需要登陆 GET /user/info
	GetUser(context.Context, *base.ClientInfo) (*UserInfo, error)
	// 找回密码 POST /user/reset-password
	ResetPassword(context.Context, *UserReq) (*base.Empty, error)
	// 修改密码 需要登陆信息 POST /user/change-password
	ChangePassword(context.Context, *ChangePasswordReq) (*base.Empty, error)
	// 获取hostid
	HostGetId(context.Context, *comm.UserLoginReq) (*HostResp, error)
	// 获取其他用户信息 POST /user/other-info
	GetOtherUser(context.Context, *GetOtherUserReq) (*UserInfo, error)
	// player 登陆
	PlayerLogin(context.Context, *comm.UserLoginReq) (*comm.UserLoginResp, error)
	GetPlayerIdByUserId(context.Context, *PlayerIdReq) (*comm.UserLoginResp, error)
	GetPlayerFromDB(context.Context, *PlayerIdReq) (*comm.Player, error)
	// 捏脸 POST /api/player/character-creator
	SetCharacterCreator(context.Context, *comm.SetCharacterCreatorReq) (*base.Empty, error)
	// 创建角色 POST /api/player/create
	PlayerCreate(context.Context, *comm.PlayerCreateReq) (*comm.PlayerCreateResp, error)
	GetPlayersInfo(context.Context, *base.PlayerIds) (*comm.PlayerCacheMap, error)
	ClearPlayerCache(context.Context, *base.PlayerIds) (*base.Empty, error)
	SetPlayerCache(context.Context, *comm.PlayerCacheMap) (*base.Empty, error)
	GetPlayerByName(context.Context, *comm.PlayerSearchReq) (*comm.PlayerCache, error)
	GetPlayerByDisplayName(context.Context, *comm.PlayerSearchReq) (*comm.Players, error)
	PlayerMapCacheSet(context.Context, *comm.PlayerMapInfoCacheMap) (*base.Empty, error)
	PlayerMapCacheClear(context.Context, *base.PlayerIds) (*base.Empty, error)
	PlayerMapCacheGet(context.Context, *base.PlayerIds) (*comm.PlayerMapInfoCacheMap, error)
	// *
	// 校验otp POST /user/check-otp
	CheckOtp(context.Context, *CheckOtpReq) (*CheckOtpRes, error)
	// *
	// 忘记密码设置密码 POST /user/set-password
	SetPassword(context.Context, *SetPasswordReq) (*base.Empty, error)
	// *
	// 快速注册 无邮箱校验 POST /user/quick-register
	QuickRegister(context.Context, *QuickRegisterReq) (*UserResp, error)
	// *
	// 密码验证 POST /user/check-password
	CheckPassword(context.Context, *CheckPasswordReq) (*CheckPasswordRes, error)
	// *
	// 生成第三方token 登录轮询使用 POST /user/generate-external-token
	GenerateExternalToken(context.Context, *GenerateExternalTokenReq) (*GenerateExternalTokenRes, error)
	// *
	// 游戏客户端跳转web用户中心 POST /user/center
	PlayerCenter(context.Context, *UserReq) (*UserResp, error)
	GMTModifyEmail(context.Context, *GMTModifyEmailReq) (*base.Empty, error)
	GMTUnbindExternalId(context.Context, *GMTUnbindExternalReq) (*base.Empty, error)
	// *
	// 绑定第三方 POST /user/bind-external
	BindExternal(context.Context, *BindExternalReq) (*UserResp, error)
	// *
	// 绑定第三方 POST /user/unbind-external
	UnBindExternal(context.Context, *base.ClientInfo) (*base.Empty, error)
	// *
	// 绑定游戏 POST /user/bind-email
	BindEmail(context.Context, *BindEmailReq) (*base.Empty, error)
	// *
	// 官网预约 POST /user/pre-register
	PreRegister(context.Context, *PreRegisterReq) (*base.Empty, error)
	// *
	// 官网预约开服发送 POST /user/pre-register
	PreRegisterRewardSend(context.Context, *base.Empty) (*base.Empty, error)
}

// UnimplementedUserServer should be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Ping(context.Context, *base.Empty) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUserServer) UserCheck(context.Context, *UserReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheck not implemented")
}
func (UnimplementedUserServer) SendOtp(context.Context, *OtpReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOtp not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *UserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *UserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) Modify(context.Context, *ModifyReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedUserServer) Logout(context.Context, *LogoutReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserServer) GetUser(context.Context, *base.ClientInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) ResetPassword(context.Context, *UserReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServer) ChangePassword(context.Context, *ChangePasswordReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServer) HostGetId(context.Context, *comm.UserLoginReq) (*HostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostGetId not implemented")
}
func (UnimplementedUserServer) GetOtherUser(context.Context, *GetOtherUserReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtherUser not implemented")
}
func (UnimplementedUserServer) PlayerLogin(context.Context, *comm.UserLoginReq) (*comm.UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerLogin not implemented")
}
func (UnimplementedUserServer) GetPlayerIdByUserId(context.Context, *PlayerIdReq) (*comm.UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerIdByUserId not implemented")
}
func (UnimplementedUserServer) GetPlayerFromDB(context.Context, *PlayerIdReq) (*comm.Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerFromDB not implemented")
}
func (UnimplementedUserServer) SetCharacterCreator(context.Context, *comm.SetCharacterCreatorReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCharacterCreator not implemented")
}
func (UnimplementedUserServer) PlayerCreate(context.Context, *comm.PlayerCreateReq) (*comm.PlayerCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerCreate not implemented")
}
func (UnimplementedUserServer) GetPlayersInfo(context.Context, *base.PlayerIds) (*comm.PlayerCacheMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayersInfo not implemented")
}
func (UnimplementedUserServer) ClearPlayerCache(context.Context, *base.PlayerIds) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPlayerCache not implemented")
}
func (UnimplementedUserServer) SetPlayerCache(context.Context, *comm.PlayerCacheMap) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayerCache not implemented")
}
func (UnimplementedUserServer) GetPlayerByName(context.Context, *comm.PlayerSearchReq) (*comm.PlayerCache, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByName not implemented")
}
func (UnimplementedUserServer) GetPlayerByDisplayName(context.Context, *comm.PlayerSearchReq) (*comm.Players, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerByDisplayName not implemented")
}
func (UnimplementedUserServer) PlayerMapCacheSet(context.Context, *comm.PlayerMapInfoCacheMap) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerMapCacheSet not implemented")
}
func (UnimplementedUserServer) PlayerMapCacheClear(context.Context, *base.PlayerIds) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerMapCacheClear not implemented")
}
func (UnimplementedUserServer) PlayerMapCacheGet(context.Context, *base.PlayerIds) (*comm.PlayerMapInfoCacheMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerMapCacheGet not implemented")
}
func (UnimplementedUserServer) CheckOtp(context.Context, *CheckOtpReq) (*CheckOtpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOtp not implemented")
}
func (UnimplementedUserServer) SetPassword(context.Context, *SetPasswordReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedUserServer) QuickRegister(context.Context, *QuickRegisterReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuickRegister not implemented")
}
func (UnimplementedUserServer) CheckPassword(context.Context, *CheckPasswordReq) (*CheckPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedUserServer) GenerateExternalToken(context.Context, *GenerateExternalTokenReq) (*GenerateExternalTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExternalToken not implemented")
}
func (UnimplementedUserServer) PlayerCenter(context.Context, *UserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerCenter not implemented")
}
func (UnimplementedUserServer) GMTModifyEmail(context.Context, *GMTModifyEmailReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GMTModifyEmail not implemented")
}
func (UnimplementedUserServer) GMTUnbindExternalId(context.Context, *GMTUnbindExternalReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GMTUnbindExternalId not implemented")
}
func (UnimplementedUserServer) BindExternal(context.Context, *BindExternalReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindExternal not implemented")
}
func (UnimplementedUserServer) UnBindExternal(context.Context, *base.ClientInfo) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindExternal not implemented")
}
func (UnimplementedUserServer) BindEmail(context.Context, *BindEmailReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEmail not implemented")
}
func (UnimplementedUserServer) PreRegister(context.Context, *PreRegisterReq) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreRegister not implemented")
}
func (UnimplementedUserServer) PreRegisterRewardSend(context.Context, *base.Empty) (*base.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreRegisterRewardSend not implemented")
}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Ping(ctx, req.(*base.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/UserCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCheck(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SendOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SendOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendOtp(ctx, req.(*OtpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Modify(ctx, req.(*ModifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*base.ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ResetPassword(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_HostGetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).HostGetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/HostGetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).HostGetId(ctx, req.(*comm.UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetOtherUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtherUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetOtherUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetOtherUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetOtherUser(ctx, req.(*GetOtherUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PlayerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PlayerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PlayerLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PlayerLogin(ctx, req.(*comm.UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPlayerIdByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPlayerIdByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetPlayerIdByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPlayerIdByUserId(ctx, req.(*PlayerIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPlayerFromDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPlayerFromDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetPlayerFromDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPlayerFromDB(ctx, req.(*PlayerIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetCharacterCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.SetCharacterCreatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetCharacterCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetCharacterCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetCharacterCreator(ctx, req.(*comm.SetCharacterCreatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PlayerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.PlayerCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PlayerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PlayerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PlayerCreate(ctx, req.(*comm.PlayerCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPlayersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.PlayerIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPlayersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetPlayersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPlayersInfo(ctx, req.(*base.PlayerIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ClearPlayerCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.PlayerIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ClearPlayerCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/ClearPlayerCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ClearPlayerCache(ctx, req.(*base.PlayerIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetPlayerCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.PlayerCacheMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetPlayerCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetPlayerCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetPlayerCache(ctx, req.(*comm.PlayerCacheMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPlayerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.PlayerSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPlayerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetPlayerByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPlayerByName(ctx, req.(*comm.PlayerSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPlayerByDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.PlayerSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPlayerByDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetPlayerByDisplayName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPlayerByDisplayName(ctx, req.(*comm.PlayerSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PlayerMapCacheSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(comm.PlayerMapInfoCacheMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PlayerMapCacheSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PlayerMapCacheSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PlayerMapCacheSet(ctx, req.(*comm.PlayerMapInfoCacheMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PlayerMapCacheClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.PlayerIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PlayerMapCacheClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PlayerMapCacheClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PlayerMapCacheClear(ctx, req.(*base.PlayerIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PlayerMapCacheGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.PlayerIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PlayerMapCacheGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PlayerMapCacheGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PlayerMapCacheGet(ctx, req.(*base.PlayerIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOtpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CheckOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckOtp(ctx, req.(*CheckOtpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetPassword(ctx, req.(*SetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_QuickRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuickRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).QuickRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/QuickRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).QuickRegister(ctx, req.(*QuickRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckPassword(ctx, req.(*CheckPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GenerateExternalToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateExternalTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GenerateExternalToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GenerateExternalToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GenerateExternalToken(ctx, req.(*GenerateExternalTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PlayerCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PlayerCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PlayerCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PlayerCenter(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GMTModifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GMTModifyEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GMTModifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GMTModifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GMTModifyEmail(ctx, req.(*GMTModifyEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GMTUnbindExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GMTUnbindExternalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GMTUnbindExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GMTUnbindExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GMTUnbindExternalId(ctx, req.(*GMTUnbindExternalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindExternalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/BindExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindExternal(ctx, req.(*BindExternalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UnBindExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UnBindExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/UnBindExternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UnBindExternal(ctx, req.(*base.ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/BindEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindEmail(ctx, req.(*BindEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PreRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PreRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PreRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PreRegister(ctx, req.(*PreRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PreRegisterRewardSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PreRegisterRewardSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/PreRegisterRewardSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PreRegisterRewardSend(ctx, req.(*base.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _User_Ping_Handler,
		},
		{
			MethodName: "UserCheck",
			Handler:    _User_UserCheck_Handler,
		},
		{
			MethodName: "SendOtp",
			Handler:    _User_SendOtp_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _User_Modify_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _User_Logout_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _User_ResetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _User_ChangePassword_Handler,
		},
		{
			MethodName: "HostGetId",
			Handler:    _User_HostGetId_Handler,
		},
		{
			MethodName: "GetOtherUser",
			Handler:    _User_GetOtherUser_Handler,
		},
		{
			MethodName: "PlayerLogin",
			Handler:    _User_PlayerLogin_Handler,
		},
		{
			MethodName: "GetPlayerIdByUserId",
			Handler:    _User_GetPlayerIdByUserId_Handler,
		},
		{
			MethodName: "GetPlayerFromDB",
			Handler:    _User_GetPlayerFromDB_Handler,
		},
		{
			MethodName: "SetCharacterCreator",
			Handler:    _User_SetCharacterCreator_Handler,
		},
		{
			MethodName: "PlayerCreate",
			Handler:    _User_PlayerCreate_Handler,
		},
		{
			MethodName: "GetPlayersInfo",
			Handler:    _User_GetPlayersInfo_Handler,
		},
		{
			MethodName: "ClearPlayerCache",
			Handler:    _User_ClearPlayerCache_Handler,
		},
		{
			MethodName: "SetPlayerCache",
			Handler:    _User_SetPlayerCache_Handler,
		},
		{
			MethodName: "GetPlayerByName",
			Handler:    _User_GetPlayerByName_Handler,
		},
		{
			MethodName: "GetPlayerByDisplayName",
			Handler:    _User_GetPlayerByDisplayName_Handler,
		},
		{
			MethodName: "PlayerMapCacheSet",
			Handler:    _User_PlayerMapCacheSet_Handler,
		},
		{
			MethodName: "PlayerMapCacheClear",
			Handler:    _User_PlayerMapCacheClear_Handler,
		},
		{
			MethodName: "PlayerMapCacheGet",
			Handler:    _User_PlayerMapCacheGet_Handler,
		},
		{
			MethodName: "CheckOtp",
			Handler:    _User_CheckOtp_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _User_SetPassword_Handler,
		},
		{
			MethodName: "QuickRegister",
			Handler:    _User_QuickRegister_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _User_CheckPassword_Handler,
		},
		{
			MethodName: "GenerateExternalToken",
			Handler:    _User_GenerateExternalToken_Handler,
		},
		{
			MethodName: "PlayerCenter",
			Handler:    _User_PlayerCenter_Handler,
		},
		{
			MethodName: "GMTModifyEmail",
			Handler:    _User_GMTModifyEmail_Handler,
		},
		{
			MethodName: "GMTUnbindExternalId",
			Handler:    _User_GMTUnbindExternalId_Handler,
		},
		{
			MethodName: "BindExternal",
			Handler:    _User_BindExternal_Handler,
		},
		{
			MethodName: "UnBindExternal",
			Handler:    _User_UnBindExternal_Handler,
		},
		{
			MethodName: "BindEmail",
			Handler:    _User_BindEmail_Handler,
		},
		{
			MethodName: "PreRegister",
			Handler:    _User_PreRegister_Handler,
		},
		{
			MethodName: "PreRegisterRewardSend",
			Handler:    _User_PreRegisterRewardSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

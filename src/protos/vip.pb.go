// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vip.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//553 VIP一次性宝箱购买 DataVipBox cid
type VipBuyChest_C struct {
	ProtoId              int32    `protobuf:"varint,1,opt,name=protoId,proto3" json:"protoId,omitempty"`
	Cid                  int32    `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipBuyChest_C) Reset()         { *m = VipBuyChest_C{} }
func (m *VipBuyChest_C) String() string { return proto.CompactTextString(m) }
func (*VipBuyChest_C) ProtoMessage()    {}
func (*VipBuyChest_C) Descriptor() ([]byte, []int) {
	return fileDescriptor_2670e1a48005ac67, []int{0}
}

func (m *VipBuyChest_C) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipBuyChest_C.Unmarshal(m, b)
}
func (m *VipBuyChest_C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipBuyChest_C.Marshal(b, m, deterministic)
}
func (m *VipBuyChest_C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipBuyChest_C.Merge(m, src)
}
func (m *VipBuyChest_C) XXX_Size() int {
	return xxx_messageInfo_VipBuyChest_C.Size(m)
}
func (m *VipBuyChest_C) XXX_DiscardUnknown() {
	xxx_messageInfo_VipBuyChest_C.DiscardUnknown(m)
}

var xxx_messageInfo_VipBuyChest_C proto.InternalMessageInfo

func (m *VipBuyChest_C) GetProtoId() int32 {
	if m != nil {
		return m.ProtoId
	}
	return 0
}

func (m *VipBuyChest_C) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

//557 VIP每日宝箱领取(只领当前级别) DataUserCount cid=6 val=0未领/1已领
type VipGetDailyChest_C struct {
	ProtoId              int32    `protobuf:"varint,1,opt,name=protoId,proto3" json:"protoId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VipGetDailyChest_C) Reset()         { *m = VipGetDailyChest_C{} }
func (m *VipGetDailyChest_C) String() string { return proto.CompactTextString(m) }
func (*VipGetDailyChest_C) ProtoMessage()    {}
func (*VipGetDailyChest_C) Descriptor() ([]byte, []int) {
	return fileDescriptor_2670e1a48005ac67, []int{1}
}

func (m *VipGetDailyChest_C) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VipGetDailyChest_C.Unmarshal(m, b)
}
func (m *VipGetDailyChest_C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VipGetDailyChest_C.Marshal(b, m, deterministic)
}
func (m *VipGetDailyChest_C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VipGetDailyChest_C.Merge(m, src)
}
func (m *VipGetDailyChest_C) XXX_Size() int {
	return xxx_messageInfo_VipGetDailyChest_C.Size(m)
}
func (m *VipGetDailyChest_C) XXX_DiscardUnknown() {
	xxx_messageInfo_VipGetDailyChest_C.DiscardUnknown(m)
}

var xxx_messageInfo_VipGetDailyChest_C proto.InternalMessageInfo

func (m *VipGetDailyChest_C) GetProtoId() int32 {
	if m != nil {
		return m.ProtoId
	}
	return 0
}

func init() {
	proto.RegisterType((*VipBuyChest_C)(nil), "protos.VipBuyChest_C")
	proto.RegisterType((*VipGetDailyChest_C)(nil), "protos.VipGetDailyChest_C")
}

func init() { proto.RegisterFile("vip.proto", fileDescriptor_2670e1a48005ac67) }

var fileDescriptor_2670e1a48005ac67 = []byte{
	// 106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xcb, 0x2c, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0xd6, 0x5c, 0xbc, 0x61, 0x99,
	0x05, 0x4e, 0xa5, 0x95, 0xce, 0x19, 0xa9, 0xc5, 0x25, 0xf1, 0xce, 0x42, 0x12, 0x5c, 0xec, 0x60,
	0x29, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x18, 0x57, 0x48, 0x80, 0x8b, 0x39,
	0x39, 0x33, 0x45, 0x82, 0x09, 0x2c, 0x0a, 0x62, 0x2a, 0xe9, 0x71, 0x09, 0x85, 0x65, 0x16, 0xb8,
	0xa7, 0x96, 0xb8, 0x24, 0x66, 0xe6, 0x10, 0x36, 0x21, 0x09, 0x62, 0xa9, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xec, 0xed, 0xb2, 0x59, 0x88, 0x00, 0x00, 0x00,
}

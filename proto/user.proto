syntax = "proto3";

import "base.proto";
import "comm.proto";

package user;
option  go_package = "common/proto/user";

enum Source {
    option allow_alias         = true;
    Source_None                = 0;
    UserSource_UGC             = 1;  // UGC
    UserSource_OfficialWebsite = 2;  // 官网
    ExternalSource_Discord     = 1;
    ExternalSource_Google      = 2;
    ExternalSource_Meta        = 3;
}

message UserReq {
    base.ClientInfo client_info             = 1;
    string          email                   = 2;
    string          password                = 3;
    string          otp                     = 4;   // 验证码 只有注册时使用
    string          name                    = 5;   // 用户名
    string          crypto_key              = 6;   // 客户端公钥
    int32           check_type              = 7;   // 校验类型 编辑器需求使用   1 注册 2 登录
    Source          source                  = 8;   // 1 ugc
    Source          external_source         = 9;   //
    string          external_code           = 10;  // 三方oauth2 code
    string          external_token          = 11;  // 轮询 token 自己生成
    string          birthday                = 12;  // eg: 2000-01-01
    string          external_user_id        = 13;  // 三方user_id
    string          external_validate_token = 14;  // 三方验证登录token eg: google_id_token  meta: access_token
}

message UserResp {
    string authorization = 1;  // 会话验证密钥
    string crypto_key    = 2;
    int64  id            = 3;
    int64  player_id     = 4;
    string birthday      = 5;
    string name          = 6;
}

message ModifyReq {
    enum OptType {
        _NO            = 0;
        BindExternal   = 1;
        UnBindExternal = 2;
    }
    base.ClientInfo client_info     = 1;
    string          name            = 2;
    string          birthday        = 3;
    string          email           = 4;
    string          token           = 5;
    string          password        = 6;
    Source          external_source = 7;
    OptType         opt_type        = 8;  // 操作类型
    string          external_code   = 9;  // 三方oauth2 code
}

message UserInfo {
    int64  id              = 1;
    string name            = 2;
    string email           = 3;  // 注册邮箱
    Source source          = 4;  //
    string external_code   = 5;  // 三方user_id
    string birthday        = 6;
    int32  verified        = 7;  // 邮箱是否验证  1 已验证
    Source external_source = 8;
}

message ChangePasswordReq {
    base.ClientInfo client_info  = 1;  // 客户端信息
    string          new_password = 2;  // 新密码
    string          old_password = 3;  // 旧密码
}

message OtpReq {
    base.ClientInfo client_info = 1;
    string          email       = 2;
    int32           otp_type    = 3;  // 1 注册 2 找回密码
    int64           user_id     = 4;  // user_id
}

message HostResp {
    int32 host_id = 1;
}

message HostReq {
    base.ClientInfo client_info = 1;
    string          env         = 2;
    string          name        = 3;  // game name
    int64           game_id     = 4;
    int32           version     = 5;
}
message PlayerIdReq {
    string host    = 1;
    int64  user_id = 2;
}

message GetOtherUserReq {
    base.ClientInfo client_info = 1;
    int64           user_id     = 2;
}

message CheckOtpReq {
    enum OtpType {
        _NoType        = 0;
        BeforeRegister = 1;
        AfterRegister  = 2;
    }
    base.ClientInfo client_info = 1;
    string          email       = 2;
    OtpType         otp_type    = 3;  // 1 注册之前验证 2 注册之后验证
    string          code        = 4;  // 验证码
    int64           user_id     = 5;
    string          check_token = 6;  // 非必要字段，只做校验
}
message CheckOtpRes {
    string success_token = 1;  // 验证成功凭证
}
message SetPasswordReq {
    base.ClientInfo client_info        = 1;
    string          email              = 2;
    string          password           = 3;
    string          set_password_token = 4;
}

message QuickRegisterReq {
    base.ClientInfo client_info = 1;
    string          email       = 2;
    string          password    = 3;
    Source          source      = 4;  // 1 ugc
    string          birthday    = 5;  // eg: 2000-01-01
    string          crypto_key  = 6;  // 客户端公钥
}

message CheckPasswordReq {
    base.ClientInfo client_info = 1;
    string          password    = 3;
}

message CheckPasswordRes {
    string success_token = 1;
}

message GenerateExternalTokenReq {
    Source external_source = 1;
    enum TokenUse {
        Default = 0;  // 默认登录使用
        Bind    = 1;
    }
    TokenUse use_type = 2;
}
message GenerateExternalTokenRes {
    string token           = 1;
    Source external_source = 2;
    string url             = 3;
}
message LogoutReq {
    base.ClientInfo client_info   = 1;
    string          authorization = 2;
}

message GMTModifyEmailReq {
    int64  user_id = 1;
    string email   = 2;
}

message GMTUnbindExternalReq {
    int64  user_id  = 1;
    string email    = 2;
    string password = 3;
}

message BindExternalReq {
    base.ClientInfo client_info      = 1;
    string          pull_token       = 2;  // 轮询 token 自己生成
    Source          external_source  = 3;  //
    string          external_user_id = 4;  // 三方user_id
}

message BindEmailReq {
    base.ClientInfo client_info = 1;
    string          email       = 2;
    string          password    = 3;
    string          check_token = 4;
}

message PreRegisterReq {
    string email      = 1;
    string utm_source = 2;
    string discord_id = 3;
    string utm_id     = 4;
}

service User {
    rpc Ping(base.Empty) returns (base.Empty);

    // 提前校验字段  POST /user/user-check
    rpc UserCheck(UserReq) returns (base.Empty);

    // 发送验证码 POST /user/otp
    rpc SendOtp(OtpReq) returns (base.Empty);

    // 注册 POST /user/register
    rpc Register(UserReq) returns (UserResp);

    // 登录 POST /user/login
    rpc Login(UserReq) returns (UserResp);

    // 设置用户名称 POST /user/modify
    rpc Modify(ModifyReq) returns (UserInfo);

    // 登出 需要登陆 GET /user/logout
    rpc Logout(LogoutReq) returns (base.Empty);

    //    // 激活 需要登陆 POST /user/activate
    //    rpc Activate(UserReq) returns(base.Empty);

    // 获取用户信息 需要登陆 GET /user/info
    rpc GetUser(base.ClientInfo) returns (UserInfo);

    // 找回密码 POST /user/reset-password
    rpc ResetPassword(UserReq) returns (base.Empty);

    // 修改密码 需要登陆信息 POST /user/change-password
    rpc ChangePassword(ChangePasswordReq) returns (base.Empty);

    // 获取hostid
    rpc HostGetId(comm.UserLoginReq) returns (HostResp);

    // 获取其他用户信息 POST /user/other-info
    rpc GetOtherUser(GetOtherUserReq) returns (UserInfo);
    // player 登陆
    rpc PlayerLogin(comm.UserLoginReq) returns (comm.UserLoginResp);
    rpc GetPlayerIdByUserId(PlayerIdReq) returns (comm.UserLoginResp);

    rpc GetPlayerFromDB(user.PlayerIdReq) returns (comm.Player);

    // 捏脸 POST /api/player/character-creator
    rpc SetCharacterCreator(comm.SetCharacterCreatorReq) returns (base.Empty);
    // --------------------------------------------------------------------------------------------------

    // 创建角色 POST /api/player/create
    rpc PlayerCreate(comm.PlayerCreateReq) returns (comm.PlayerCreateResp);

    rpc GetPlayersInfo(base.PlayerIds) returns (comm.PlayerCacheMap);
    rpc ClearPlayerCache(base.PlayerIds) returns (base.Empty);
    rpc SetPlayerCache(comm.PlayerCacheMap) returns (base.Empty);

    rpc GetPlayerByName(comm.PlayerSearchReq) returns (comm.PlayerCache);
    rpc GetPlayerByDisplayName(comm.PlayerSearchReq) returns (comm.Players);

    rpc PlayerMapCacheSet(comm.PlayerMapInfoCacheMap) returns (base.Empty);
    rpc PlayerMapCacheClear(base.PlayerIds) returns (base.Empty);
    rpc PlayerMapCacheGet(base.PlayerIds) returns (comm.PlayerMapInfoCacheMap);
    /**
     * 校验otp POST /user/check-otp
     */
    rpc CheckOtp(CheckOtpReq) returns (CheckOtpRes);
    /**
     * 忘记密码设置密码 POST /user/set-password
     */
    rpc SetPassword(SetPasswordReq) returns (base.Empty);
    /**
     * 快速注册 无邮箱校验 POST /user/quick-register
     */
    rpc QuickRegister(QuickRegisterReq) returns (UserResp);
    /**
     * 密码验证 POST /user/check-password
     */
    rpc CheckPassword(CheckPasswordReq) returns (CheckPasswordRes);
    /**
     * 生成第三方token 登录轮询使用 POST /user/generate-external-token
     */
    rpc GenerateExternalToken(GenerateExternalTokenReq) returns (GenerateExternalTokenRes);
    /**
     * 游戏客户端跳转web用户中心 POST /user/center
     */
    rpc PlayerCenter(UserReq) returns (UserResp);

    rpc GMTModifyEmail(GMTModifyEmailReq) returns (base.Empty);
    rpc GMTUnbindExternalId(GMTUnbindExternalReq) returns (base.Empty);

    /**
     * 绑定第三方 POST /user/bind-external
     */
    rpc BindExternal(BindExternalReq) returns (UserResp);
    /**
     * 绑定第三方 POST /user/unbind-external
     */
    rpc UnBindExternal(base.ClientInfo) returns (base.Empty);

    /**
     * 绑定游戏 POST /user/bind-email
     */
    rpc BindEmail(BindEmailReq) returns (base.Empty);

    /**
     * 官网预约 POST /user/pre-register
     */
    rpc PreRegister(PreRegisterReq) returns (base.Empty);
    /**
     * 官网预约开服发送 POST /user/pre-register
     */
    rpc PreRegisterRewardSend(base.Empty) returns (base.Empty);
}
